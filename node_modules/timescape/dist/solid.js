import {
  $NOW,
  TimescapeManager,
  marry
} from "./chunk-UKJDWKD5.js";

// src/integrations/solid.ts
import { createEffect, onCleanup } from "solid-js";
import { createStore } from "solid-js/store";
var useTimescape = (options = {}) => {
  const [optionsStore, update] = createStore(options);
  const { date, ...rest } = options;
  const manager = new TimescapeManager(date, rest);
  createEffect(() => {
    manager.on("changeDate", (nextDate) => {
      update("date", nextDate);
    });
  });
  createEffect(() => {
    manager.date = optionsStore.date;
    manager.minDate = optionsStore.minDate;
    manager.maxDate = optionsStore.maxDate;
    manager.hour12 = optionsStore.hour12;
    manager.digits = optionsStore.digits;
    manager.wrapAround = optionsStore.wrapAround;
    manager.snapToStep = optionsStore.snapToStep;
    manager.wheelControl = optionsStore.wheelControl;
  });
  onCleanup(() => manager.remove());
  return {
    _manager: manager,
    getInputProps: (type) => ({
      ref: (element) => element && manager.registerElement(element, type)
    }),
    getRootProps: () => ({
      ref: (element) => element && manager.registerRoot(element)
    }),
    update,
    options: optionsStore
  };
};
var useTimescapeRange = (options = {}) => {
  const from = useTimescape(options.from);
  const to = useTimescape(options.to);
  marry(from._manager, to._manager);
  return {
    getRootProps: () => ({
      ref: (element) => {
        if (!element) return;
        from._manager.registerRoot(element);
        to._manager.registerRoot(element);
      }
    }),
    from: {
      getInputProps: from.getInputProps,
      options: from.options,
      update: from.update
    },
    to: {
      getInputProps: to.getInputProps,
      options: to.options,
      update: to.update
    }
  };
};
export {
  $NOW,
  useTimescape,
  useTimescapeRange
};
