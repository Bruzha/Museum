import {
  $NOW,
  TimescapeManager,
  marry
} from "./chunk-UKJDWKD5.js";

// src/integrations/svelte.ts
import { derived, writable } from "svelte/store";
import { onDestroy } from "svelte";
var createTimescape = (options = {}) => {
  const optionsStore = writable(options);
  const { date, ...rest } = options;
  const manager = new TimescapeManager(date, rest);
  manager.on("changeDate", (nextDate) => {
    optionsStore.update((value) => ({ ...value, date: nextDate }));
  });
  optionsStore.subscribe((value) => {
    manager.minDate = value.minDate;
    manager.maxDate = value.maxDate;
    manager.hour12 = value.hour12;
    manager.digits = value.digits;
    manager.wrapAround = value.wrapAround;
    manager.snapToStep = value.snapToStep;
    manager.wheelControl = value.wheelControl;
  });
  derived(optionsStore, ($options) => $options.date).subscribe((value) => {
    manager.date = value;
  });
  const inputProps = (element, type) => manager.registerElement(element, type);
  const rootProps = (element) => manager.registerRoot(element);
  onDestroy(() => manager.remove());
  return {
    _manager: manager,
    inputProps,
    rootProps,
    options: optionsStore,
    update: optionsStore.update
  };
};
var createTimescapeRange = (options = {}) => {
  const from = createTimescape(options.from);
  const to = createTimescape(options.to);
  marry(from._manager, to._manager);
  const rangeRootProps = (element) => {
    from.rootProps(element);
    to.rootProps(element);
  };
  return {
    fromInputProps: from.inputProps,
    toInputProps: to.inputProps,
    from: {
      inputProps: from.inputProps,
      options: from.options,
      update: from.update
    },
    to: {
      inputProps: to.inputProps,
      options: to.options,
      update: to.update
    },
    rangeRootProps
  };
};
export {
  $NOW as NOW,
  createTimescape,
  createTimescapeRange
};
