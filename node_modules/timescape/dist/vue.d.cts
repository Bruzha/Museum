import * as vue from 'vue';
import { ComponentPublicInstance } from 'vue';
import TimescapeManager, { Options, DateType, $NOW, RangeOptions } from './index.cjs';

declare const useTimescape: (options?: Options) => {
    readonly _manager: TimescapeManager;
    readonly registerElement: (type: DateType) => (element: Element | ComponentPublicInstance | null) => false | HTMLInputElement | undefined;
    readonly registerRoot: () => (element: Element | ComponentPublicInstance | null) => void;
    readonly options: vue.Ref<{
        date?: Date | undefined;
        minDate?: (Date | $NOW) | undefined;
        maxDate?: (Date | $NOW) | undefined;
        hour12?: boolean | undefined;
        digits?: ("numeric" | "2-digit") | undefined;
        wrapAround?: boolean | undefined;
        snapToStep?: boolean | undefined;
        wheelControl?: boolean | undefined;
    }, Options | {
        date?: Date | undefined;
        minDate?: (Date | $NOW) | undefined;
        maxDate?: (Date | $NOW) | undefined;
        hour12?: boolean | undefined;
        digits?: ("numeric" | "2-digit") | undefined;
        wrapAround?: boolean | undefined;
        snapToStep?: boolean | undefined;
        wheelControl?: boolean | undefined;
    }>;
};
declare const useTimescapeRange: (options?: RangeOptions) => {
    readonly registerRangeRoot: () => (element: Element | ComponentPublicInstance | null) => void;
    readonly from: {
        readonly registerElement: (type: DateType) => (element: Element | ComponentPublicInstance | null) => false | HTMLInputElement | undefined;
        readonly options: vue.Ref<{
            date?: Date | undefined;
            minDate?: (Date | $NOW) | undefined;
            maxDate?: (Date | $NOW) | undefined;
            hour12?: boolean | undefined;
            digits?: ("numeric" | "2-digit") | undefined;
            wrapAround?: boolean | undefined;
            snapToStep?: boolean | undefined;
            wheelControl?: boolean | undefined;
        }, Options | {
            date?: Date | undefined;
            minDate?: (Date | $NOW) | undefined;
            maxDate?: (Date | $NOW) | undefined;
            hour12?: boolean | undefined;
            digits?: ("numeric" | "2-digit") | undefined;
            wrapAround?: boolean | undefined;
            snapToStep?: boolean | undefined;
            wheelControl?: boolean | undefined;
        }>;
    };
    readonly to: {
        readonly registerElement: (type: DateType) => (element: Element | ComponentPublicInstance | null) => false | HTMLInputElement | undefined;
        readonly options: vue.Ref<{
            date?: Date | undefined;
            minDate?: (Date | $NOW) | undefined;
            maxDate?: (Date | $NOW) | undefined;
            hour12?: boolean | undefined;
            digits?: ("numeric" | "2-digit") | undefined;
            wrapAround?: boolean | undefined;
            snapToStep?: boolean | undefined;
            wheelControl?: boolean | undefined;
        }, Options | {
            date?: Date | undefined;
            minDate?: (Date | $NOW) | undefined;
            maxDate?: (Date | $NOW) | undefined;
            hour12?: boolean | undefined;
            digits?: ("numeric" | "2-digit") | undefined;
            wrapAround?: boolean | undefined;
            snapToStep?: boolean | undefined;
            wheelControl?: boolean | undefined;
        }>;
    };
};

export { $NOW, DateType, Options, RangeOptions, useTimescape, useTimescapeRange };
